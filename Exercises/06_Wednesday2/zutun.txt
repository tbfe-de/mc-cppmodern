		Die etwas längere Übung für den Abschluss des Tages
		===================================================

Bei dieser Aufgabe müssen Sie sich zunächst etwas Zeit nehmen um die Quelltexte
des `airtravel`-Projekts näher anzusehen.

Dieses besteht aus den wesentlichen zwei Klassen `Airport` und `Connection`,
welche jeweils Flughäfen und Flugverbindungen definieren.

Da die Flughäfen (über `std::shared_ptr`) auf die Flugverbindungen verweisen,
während diese wiederum (über `std::shared_ptr` auf die Flughäfen (zurück)
verweisen, besteht hier die prinzipielle Gefahr zyklischer Referenzen, welche
trotz der Verwendung referenzzählender Zeigern letzten Endes einen Memory-Leak
verursachen könnten.

Wenn Sie das Programm `./airtravel` gestarten haben, erhalten Sie mit `?` eine
Übersicht über die verfügbaren Kommandos, mit denen Flughäfen und -verbindungen
angelegt, aufgelistet und wieder gelöscht werden können.

Spielen Sie alle diese Möglichkeiten durch, um damit etwas vertraut zu werden.
Damit Sie nicht immer den Datenbestand händisch wieder neu aufbauen müssen, ist
die Datei `setup` vorbeitet, die Sie mit dem `$`-Kommando einlesen können.

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

1. Teil:

Demonstrieren Sie zwei Szenarien, die jeweils damit beginnen, dass Sie das in
der Datei `setup` vorbereitete Szenario einlesen und anschließend einige Teile
davon wieder per Hand entfernen.

Je nachdem wie Sie dann weiter vorgehen, werden am Ende weder Flughafen-Objekte
noch Flugverbindungs-Objekte übrig bleiben ODER aber es gibt noch einige
solcher Objekte, die sich aber nicht mehr mit den Kommandos '>', '<' und '='
auflisten lassen.

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

2. Teil:

Bereiten Sie die Beseitigung des Memory-Leaks vor, indem Sie zunächst für die
expliziten `std::shared_ptr<Airport>` und `std::shared_ptr<Connection>` jeweils
einen Typ-Alias `AirportRef` und `ConnectionRef` einführen.

Ziel: Das Programm muss nach dieser Änderung fehlerfrei kompilierbar sein und es
      wird natürlich weiterhin das Problem mit dem Memory-Leak haben.

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

3. Teil:

Ändern Sie nun mindestens EINEN der beiden Typ-Aliase von `std::shared_ptr` in
`std::weak_ptr`, AUSGENOMMEN in `airtravel.cpp`, dort MÜSSEN `knownAirports`
und `knownConnections` weiterhin via `std::shared_ptr` auf `Airport`- bzw.
`Connection`-Objekte referenzieren, damit diese (mindestens) so lange am Leben
gehalten werden, wie sie dort bekannt sind.

NATÜRLICH WIRD ES JETZT FEHLER GEBEN.

Versuchen Sie diese zunächst mit dem minimal möglichen Aufwand zu beseitigen,
auch wenn das bedeutet, dass bei gelöschten Flughäfen oder Verbindungen in den
Übersichten nicht mehr alles in der früheren Form ausgegeben wird.

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

4. Teil:

Da die im letzten Schritt ersetzten `std::shared_ptr` natürlich nicht grundlos
existierten, sollten Sie nun auch auch eine Lösung für den Fall finden, dass
aus dem `std::weak_ptr` u.U. kein `std::shared_ptr` mehr gemacht werden kann,
weil das ursprünglich referenzierte Objekt mittlerweile gelöscht wurde!

Die Weiterführung der Aufgabe hängt nun davon ab, welchen der `std::shared_ptr`
Sie zu einem `std::weak_ptr` gemacht haben:

* Wenn aus der Sicht der Flugverbindungen nun die Flughäfen nur noch über
  `std::weak_ptr` erreichbar sind, sollte in der Auflistung der angeflogenen
  Stationen auch bei einem zwischenzeitlich gelöschten Flughafen weiterhin
  dessen Name erscheinen, aber mit dem nachgestellten Zusatz `[closed]`.

* Wenn dagegen aus der Sicht der Flughäfen nun die Flugverbindungen nur noch
  über `std::weak_ptr` erreichbar sind, sollte bei einer weggefallenen
  Flungverbindung diese stillschweigend aus der Übersicht der ankommenden oder
  abgehenden Verbungen dieses Flughafens entfernt werden – UND natürlich auch
  aus der Menge der `std::weak_ptr`, das dort gehalten wird.
